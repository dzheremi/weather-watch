var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","favorite","metric","observation","observationfeed","observationscontroller","observationshelper","reading","readingtype","scraper","state","station","stationfeed","stationscontroller","stationshelper","timezone","user","already_exists?()","extract_observations()","extract_station()","feed()","fetch_observations()","fetch_stations()","latest_observations()","parse_readings()","scraper_logger()","set_observations()","set_station()","set_stations()","show()","show()","update_observations()","update_stations()","url()","readme"],"longSearchIndex":["applicationcontroller","applicationhelper","favorite","metric","observation","observationfeed","observationscontroller","observationshelper","reading","readingtype","scraper","state","station","stationfeed","stationscontroller","stationshelper","timezone","user","observation::already_exists?()","scraper#extract_observations()","scraper#extract_station()","station#feed()","scraper#fetch_observations()","scraper#fetch_stations()","station#latest_observations()","scraper#parse_readings()","scraper#scraper_logger()","observationfeed#set_observations()","observationfeed#set_station()","stationfeed#set_stations()","observationscontroller#show()","stationscontroller#show()","scraper#update_observations()","scraper#update_stations()","state#url()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Favorite","","Favorite.html","","<p>This class is used to store a users favorite stations.\n"],["Metric","","Metric.html","","<p>Readings are associated to metrics. Example metrics can be:\n\n<pre>- Celsius (°C)\n- Millimeters (mm)\n- Hectopascals ...</pre>\n"],["Observation","","Observation.html","","<p>An observation contains multiple Reading entities - the observation class\nrecords the Station and recording …\n"],["ObservationFeed","","ObservationFeed.html","","<p>This class is used to produce a JSON feed for a set of observations, when\ngiven a Station. The class …\n"],["ObservationsController","","ObservationsController.html","","<p>API controller for accessing observational data.\n"],["ObservationsHelper","","ObservationsHelper.html","",""],["Reading","","Reading.html","","<p>Each observation contains multiple readings (i.e. Temperature, Humidity,\netc.). Each reading is assigned …\n"],["ReadingType","","ReadingType.html","","<p>Each Reading is associated to a ReadingType. The ReadingType stores the\nname of the reading, and the …\n"],["Scraper","","Scraper.html","","<p>The Scraper class contains all the methods required to obtain data from the\nBOM website.\n"],["State","","State.html","","<p>Stores all states and territories of Australia.\n"],["Station","","Station.html","","<p>Stores information for each BOM weather station for all states and\nterritories of Australia.\n"],["StationFeed","","StationFeed.html","","<p>This class is used to produce a JSON feed for a set of stations, when given\na groups of states. The class …\n"],["StationsController","","StationsController.html","","<p>API controller for access an index of stations.\n"],["StationsHelper","","StationsHelper.html","",""],["Timezone","","Timezone.html","","<p>Each Station and User is assigned a Timezone - Observations are stored in\nthe stations local timezone, …\n"],["User","","User.html","","<p>This class stores all registered users for the WeatherWatch website. Each\nuser may have multiple Favorite …\n"],["already_exists?","Observation","Observation.html#method-c-already_exists-3F","(station, recording_time)","<p>Determines if a specific observation already exists in our database.\n"],["extract_observations","Scraper","Scraper.html#method-i-extract_observations","(url)","<p>Returns the JSON object from a stations observation.\n"],["extract_station","Scraper","Scraper.html#method-i-extract_station","(url, state)","<p>Creates a new, or updates an existing, Station given it&#39;s URL and the\nState to which it belongs. …\n"],["feed","Station","Station.html#method-i-feed","(number = 10)",""],["fetch_observations","Scraper","Scraper.html#method-i-fetch_observations","(station)","<p>Will retrieve all new observations given a Station.\n"],["fetch_stations","Scraper","Scraper.html#method-i-fetch_stations","(state)","<p>Retrieves a list of the URLS for each weather station given a State. Each\nurl is then passed to the  …\n"],["latest_observations","Station","Station.html#method-i-latest_observations","(number = 1)","<p>Retrieves the latest Observation for this station. Returns False if no\nobservations are available.\n"],["parse_readings","Scraper","Scraper.html#method-i-parse_readings","(json, observation)","<p>Given a JSON feed containing a group of BOM observations, along with an\nObservation, this method will …\n"],["scraper_logger","Scraper","Scraper.html#method-i-scraper_logger","()","<p>Used to log the activity of the scraper methods.\n"],["set_observations","ObservationFeed","ObservationFeed.html#method-i-set_observations","(observations)","<p>Given a group of observations, this method will produce the appropriate\nhash structure for the JSON  …\n"],["set_station","ObservationFeed","ObservationFeed.html#method-i-set_station","(station)","<p>Given a Station, this method will produce the appropriate hash structure\nfor the JSON API.\n"],["set_stations","StationFeed","StationFeed.html#method-i-set_stations","(state)","<p>Given a State, this methods will produces the appropriate hash structure\nfor the JSON API.\n"],["show","ObservationsController","ObservationsController.html#method-i-show","()","<p>Method returns a JSON file based on the ObservationFeed class. Can be\ncalled with one of the following …\n"],["show","StationsController","StationsController.html#method-i-show","()","<p>Methods returns a JSON file based on the StationFeed class. Can be called\nwith one of the following URLs: …\n"],["update_observations","Scraper","Scraper.html#method-i-update_observations","()","<p>Updates all weather observations from BOM data feeds.\n"],["update_stations","Scraper","Scraper.html#method-i-update_stations","()","<p>Updates all stations from BOM website.\n"],["url","State","State.html#method-i-url","()","<p>Returns the URL required to capture all stations for this state.\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}